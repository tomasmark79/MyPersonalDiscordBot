{
    /* (c) Tomáš Mark 2024 */
    "version": "2.0.0",
    "inputs": [
        {
            /* MARKWARE SPECIAL INPUT ITEMS */
            "id": "specialTaskName",
            "type": "pickString",
            "description": "Select MarkWare Special Task",
            "options": [
                "Permutate All Tasks 🕧"
            ],
            "default": "Permutate All Tasks 🕧"

        },
        {
            /* MARKWARE INPUT ITEMS */
            "id": "taskName",
            "type": "pickString",
            "description": "Select MarkWare Task",
            "options": [
                "Zero to Hero 🦸",
                "Clean 🧹",
                "Conan 🗡️",
                "Configure 🔧",
                "Build 🔨",
                "Collect Licenses 📜",
                "Install Artefacts 📌",
                "Release Artefacts 📦",
                "",
                "📚 Zero to Hero 🦸",
                "📚 Clean 🧹",
                "📚 Conan 🗡️",
                "📚 Configure 🔧",
                "📚 Build 🔨",
                "📚 Collect Licenses 📜",
                "📚 Install Artefacts 📌",
                "📚 Release Artefacts 📦",
                "",
                "🎯 Zero to Hero 🦸",
                "🎯 Clean 🧹",
                "🎯 Conan 🗡️",
                "🎯 Configure 🔧",
                "🎯 Build 🔨",
                "🎯 Collect Licenses 📜",
                "🎯 Install Artefacts 📌",
                "🎯 Release Artefacts 📦",
                "",
                "🔍 Lint C/C++ files",
                "📐 Format C/C++ files (Clang)",
                "📏 Format CMake files"
            ],
            "default": "Build 🔨"
        },
        {
            /* BUILD ARCH INPUT ITEMS */
            "id": "buildArch",
            "type": "pickString",
            "description": "Select target architecture",
            "options": [
                "x86_64-linux-gnu",
                "x86_64-unknown-linux-gnu",
                "aarch64-linux-gnu",
                "x86_64-w64-mingw32"
            ],
            "default": "x86_64-linux-gnu" /* change regarding you are sitting */
        },
        {
            /* BUILD TYPE INPUT ITEMS */
            "id": "buildType",
            "type": "pickString",
            "description": "Select type of build",
            "options": [
                "Debug",
                "Release",
                "RelWithDebInfo",
                "MinSizeRel"
            ],
            "default": "Debug"
        },
    ],
    "tasks": [
        {
            /* MARKWARE SPECIAL TASKS MENU */
            "label": "MarkWare Special Tasks Menu",
            "type": "shell",
            "command": "${workspaceFolder}/SolutionController.sh",
            "args": [
                "${input:specialTaskName}",
                "SPECIALTASK"

            ],
            "group": {
                "kind": "build",
                "isDefault": true
            },
            "detail": "MarkWare Special Tasks Menu",
            "problemMatcher": [],
            "dependsOn": [
                /* "clear terminal" */ /* uncomment if you want to clear terminal before each task */
            ]
        },
        {
            /* MARKWARE TASKS MENU */
            "label": "MarkWare Tasks Menu",
            "type": "shell",
            "command": "${workspaceFolder}/SolutionController.sh",
            "args": [
                "${input:taskName}",
                "${input:buildArch}",
                "${input:buildType}"
            ],
            "group": {
                "kind": "build",
                "isDefault": true
            },
            "detail": "MarkWare Tasks Menu",
            "problemMatcher": [],
            "dependsOn": [
                /* "clear terminal" */ /* uncomment if you want to clear terminal before each task */
            ]
        },
        {
            /* DIRECT BUILD (NO MENU) */
            "label": "Direct Build",
            "type": "shell",
            "command": "${workspaceFolder}/SolutionController.sh",
            "args": [
                "Build 🔨",
                "x86_64-linux-gnu",
                "Debug"
            ],
            "group": {
                "kind": "build",
                "isDefault": false
            },
            "detail": "Direct Build",
            "problemMatcher": []
        },
        {
            /* SHORTCUTTED LINT C/C++  */
            "label": "lintC",
            "type": "shell",
            "command": "${workspaceFolder}/SolutionController.sh",
            "args": [
                "🔍 Lint C/C++ files",
                "${input:buildArch}",
                "${input:buildType}"
            ],
            "group": {
                "kind": "build",
                "isDefault": false
            },
            "detail": "lintC",
            "problemMatcher": []
        },
        {
            /* DIRECT CLANG-FORMAT (NO MENU) */
            "label": "clang-format",
            "type": "shell",
            "command": "${workspaceFolder}/SolutionController.sh",
            "args": [
                "📐 Format C/C++ files (Clang)",
                "SPECIALTASK"
            ],
            "group": {
                "kind": "build",
                "isDefault": false
            },
            "detail": "clang-format",
            "problemMatcher": []
        },
        {
            /* DIRECT CMAKE-FORMAT (NO MENU) */
            "label": "cmake-format",
            "type": "shell",
            "command": "${workspaceFolder}/SolutionController.sh",
            "args": [
                "📏 Format CMake files",
                "SPECIALTASK"
            ],
            "group": {
                "kind": "build",
                "isDefault": false
            },
            "detail": "cmake-format",
            "problemMatcher": []
        },
        {
            /* SPELLCHECK BASH SCRIPTS recursive /* ctrl + shift + atl + B  */
            "label": "shellcheck project bash scripts",
            "type": "shell",
            "command": "shellcheck",
            "args": [
                "${workspaceFolder}/SolutionController.sh",
                "${workspaceFolder}/SolutionRenamer.sh"
            ],
            "group": {
                "kind": "build",
                "isDefault": true
            },
            "detail": "shellcheck project bash scripts",
            "problemMatcher": [],
            "dependsOn": [
                "clear terminal"
            ]
        },
        { /* clear terminal */
            "label": "clear terminal",
            "type": "shell",
            "command": "clear",
            "group": "none",
            "problemMatcher": []
        }
    ]
}